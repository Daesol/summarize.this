document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded event triggered.');
  
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      console.log('Tabs queried:', tabs);
      const tab = tabs[0];

      // Ensure the URL is a YouTube video URL
      if (tab.url.includes('youtube.com/watch?v=')) {
        fetchTranscript(tab.url);
      } else {
        displayError('Current tab is not a YouTube video.');
      }
    });
  
    const fetchTranscript = (videoLink) => {
        console.log('Fetching transcript for video link:', videoLink);
        
        const payload = JSON.stringify({ videoLink });
        console.log('Payload for server:', payload);
    
        fetch('http://127.0.0.1:5000/transcript', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: payload
        })
            .then((response) => {
                console.log('Response from server received:', response);
                console.log('Response status:', response.status);
                if (response.ok) {
                    return response.json();
                } else {
                    throw new Error('Failed to fetch transcript.');
                }
            })
            .then((data) => {
                console.log('Transcript data received:', data);
                if (data && data.transcript) {
                    updateTranscript(data.transcript);
                } else if (data && data.error) {
                    displayError(data.error);
                } else {
                    checkAutoGeneratedCaption(videoLink);
                }
            })
            .catch((error) => {
                console.log('Fetch error:', error);
                displayError(error.message);
            });
    };
    
  
      
  
    const updateTranscript = (transcript) => {
      console.log('Updating transcript:', transcript);
      const transcriptElement = document.getElementById('transcript');
      const lines = transcript.split('\n').filter(l => l.trim() !== '');

      let html = '';
    
      lines.forEach(line => {
        
        // Split timestamp and text
        const parts = line.split(': ', 2);
        const timestamp = parts[0]; 
        const text = parts[1];
    
        // Wrap in spans to style separately 
        html += `<div><span class="timestamp">${timestamp}</span>: <span class="text">${text}</span></div>`;
    
      });

      transcriptElement.innerHTML = html;
    };
  
    const displayError = (message) => {
      console.log('Displaying error:', message);
      const transcriptElement = document.getElementById('transcript');
      transcriptElement.value = message;
    };
  
    const copyTranscript = () => {
        console.log('Copying transcript.');
        const transcriptElement = document.getElementById('transcript');
        const copyBtn = document.getElementById('copyBtn');

        // Get the textContent of the div
        const text = transcriptElement.textContent;
    
        // New Clipboard API
        navigator.clipboard.writeText(text)
        .then(() => {
            console.log('Transcript copied to clipboard.');
            copyBtn.innerText = "Copied!";
        })
        .catch(err => {
            console.error('Could not copy text: ', err);
        });
    };
    
    document.getElementById('copyBtn').addEventListener('click', copyTranscript);
    
    
});
